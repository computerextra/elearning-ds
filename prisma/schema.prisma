// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    role          String    @default("User")
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Enrollment Enrollment[]
    Result     Result[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Info {
    id            String          @id @default(cuid())
    name          String
    description   String
    body          String          @db.Text
    readtime      String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    CourseContent CourseContent[]
}

model Course {
    id            String          @id @default(cuid())
    name          String
    description   String?
    CourseContent CourseContent[]
    Enrollment    Enrollment[]
    Result        Result[]
    Quiz          Quiz[]
    createdAt     DateTime        @default(now())
}

model CourseContent {
    id       String  @id @default(cuid())
    type     String // Type of Content like video, document etc.
    info     Info?   @relation(fields: [infoId], references: [id])
    url      String?
    course   Course  @relation(fields: [courseId], references: [id])
    infoId   String?
    courseId String
}

model Enrollment {
    id               String   @id @default(cuid())
    user             User     @relation(fields: [userId], references: [id])
    course           Course   @relation(fields: [courseId], references: [id])
    enrollmentDate   DateTime @default(now())
    completionStatus String
    userId           String
    courseId         String
}

model Result {
    id       String @id @default(cuid())
    user     User   @relation(fields: [userId], references: [id])
    course   Course @relation(fields: [courseId], references: [id])
    quiz     Quiz   @relation(fields: [quizId], references: [id])
    score    Int
    userId   String
    courseId String
    quizId   String
}

model Quiz {
    id          String   @id @default(cuid())
    course      Course   @relation(fields: [courseId], references: [id])
    name        String
    description String
    totalMarks  Int
    Result      Result[]
    courseId    String
}
